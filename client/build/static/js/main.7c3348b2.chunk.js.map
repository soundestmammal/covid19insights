{"version":3,"sources":["Navbar.js","util/openNewTab.js","components/Hero.js","components/Indicators.tsx","components/StatePath.js","components/USMap.js","components/Summary.js","components/charts/PositiveTestRate.js","components/charts/DailyCases.js","components/charts/DailyDeaths.js","components/charts/ContactTraceRate.js","components/charts/ReproductionRate.js","components/Dashboard.js","components/About.js","AppRouter.js","index.js"],"names":["NavBar","className","to","onClick","url","window","open","focus","Hero","props","getPlaces","places","returnMe","i","length","push","onChangeText","e","userInput","target","value","filteredSuggestions","filter","place","toLowerCase","indexOf","setState","activeSuggestion","textInput","showSuggestions","nav","innerText","onKeyDown","state","keyCode","preventDefault","console","log","toDetail","submitState","states","this","title","subtitle","suggestionsListComponent","map","suggestion","index","key","class","style","display","height","renderText","width","margin","InputGroup","size","FormControl","onChange","placeholder","aria-label","aria-describedby","Component","Indicators","StatePath","unique","draw","data","fill","d","shape","stroke","strokeWidth","cursor","onMouseOver","event","onMouseOut","USMap","getRiskLevelColor","low","medium","high","critical","riskLevel","name","viewBox","Summary","reproductionRate","positiveTestRate","contactTraceRate","y","Math","round","status","renderStateStatus","renderReproductionRateContent","Error","renderPositiveTestRateContent","riskLevelColor","text","renderContactTraceRateContent","PositiveTestRate","lineData","datasets","label","positiveTestRateData","borderColor","backgroundColor","pointRadius","borderWidth","options","scales","xAxes","type","time","unit","yAxes","ticks","beginAtZero","max","gridLines","borderDash","hover","intersect","animationDuration","tooltips","mode","callbacks","tooltipItem","chart","date","xLabel","moment","format","animation","duration","maintainAspectRatio","summary","renderInfo","DailyCases","barData","movingData","lineTension","hoverBackgroundColor","stepSize","drawBorder","DailyDeaths","ContactTraceRate","min","ReproductionRate","Dashboard","riskLevelColorBackground","thisColor","zIndex","getContactTraceRate","num","dailyCases","dailyCasesMA","dailyDeaths","dailyDeathsMA","About","AppRouter","navToState","currentState","fetchData","a","axios","get","Navbar","exact","path","marginTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c3348b2.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport openNewTab from './util/openNewTab';\n\nconst NavBar = () => {\n    return (\n        <div className=\"nav-bar\">\n            <div className=\"nav-bar-inner\">\n                <div className=\"nav-bar-left\">\n                    <Link to=\"/\" className=\"nav-bar-title\">COVID-19 Insights</Link>\n                </div>\n                <div className=\"nav-bar-right\">\n                    <Link to=\"/\" className=\"nav-bar-link\">Map</Link>\n                    <Link to=\"/about\" className=\"nav-bar-link\">About</Link>\n                    <div className=\"nav-bar-link\" onClick={() => openNewTab(\"https://www.github.com/soundestmammal/covid19insights\")}>Code</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NavBar;","export default function openNewTab(url) {\n    const win = window.open(url, '_blank');\n    win.focus();\n}","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport \"../App.css\";\nimport states from '../json/states.json';\n\nclass Hero extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            activeSuggestion: 0,\n            filteredSuggestions: [],\n            showSuggestions: false,\n            textInput: \"\",\n            toDetail: false,\n        }\n        this.places = this.getPlaces(states);\n    }\n\n    getPlaces = (places) => {\n        const returnMe = [];\n        for(let i = 0; i < places.length; i++) {\n            returnMe.push(places[i][\"name\"]);\n        }\n        return returnMe;\n    }\n\n    onChangeText = (e) => {\n        const userInput = e.target.value;\n        let places = this.places;\n        const filteredSuggestions = places.filter(place => place.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n        this.setState({ \n            filteredSuggestions,\n            activeSuggestion: 0,\n            textInput: e.target.value,\n            showSuggestions: true,    \n        });\n    }\n\n    onClick = (e) => {\n        this.props.nav(e.target.innerText);\n        this.setState({\n            filteredSuggestions: [],\n            activeSuggestion: 0,\n            showSuggestions: false,\n            textInput: e.target.innerText\n        })\n    }\n\n    onKeyDown = (e) => {\n        const { activeSuggestion, filteredSuggestions } = this.state;\n        // Enter key\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            console.log(filteredSuggestions[activeSuggestion]);\n            this.props.nav(filteredSuggestions[activeSuggestion]);\n            this.setState({\n                activeSuggestion: 0,\n                showSuggestions: false,\n                textInput: filteredSuggestions[activeSuggestion],\n                toDetail: true,\n            });\n        }\n        // If user presses up arraow\n        else if(e.keyCode === 38) {\n            if(activeSuggestion === 0) {\n                return;\n            }\n            this.setState({ activeSuggestion: activeSuggestion - 1});\n        }\n        // If user presses down arrow, increment index \n        else if(e.keyCode === 40) {\n            if(activeSuggestion -1 === filteredSuggestions.length) {\n                return;\n            }\n            this.setState({ activeSuggestion: activeSuggestion+1 });\n        } \n        // Tab key\n        else if(e.keyCode === 9) {\n            e.preventDefault();\n            this.setState({\n                activeSuggestion: 0,\n                showSuggestions: false,\n                textInput: filteredSuggestions[activeSuggestion]\n            })\n        }\n    }\n\n    renderText() {\n        return(\n            <div className={`container align-items-center d-flex flex-column mt-5`}>\n                <h1>{this.props.title}</h1>\n                <p>{this.props.subtitle}</p>\n            </div>\n        );\n    }\n\n    submitState = e => {\n        e.preventDefault();\n        this.setState({ toDetail: true });\n    }\n\n    render() {\n        const { onChangeText,\n                onClick,\n                onKeyDown,\n                state: {\n                    activeSuggestion,\n                    filteredSuggestions,\n                    showSuggestions,\n                    textInput,\n                    toDetail\n                }\n        } = this;\n\n        if(toDetail) {\n            return <Redirect to=\"/detail\" />\n        }\n\n        let suggestionsListComponent;\n        if(showSuggestions && textInput) {\n            if(filteredSuggestions.length) {\n                suggestionsListComponent = (\n                    <ul className=\"suggestions\">\n                        {filteredSuggestions.map((suggestion, index) => {\n                            let className;\n\n                            if (index === activeSuggestion) {\n                                className = \"suggestion-active\"\n                                console.log(\"CLASS NAME!\", className);\n                            }\n\n                            return (\n                                <Link to=\"/detail\">\n                                    <li\n                                        className={className}\n                                        key={suggestion}\n                                        onClick={onClick}\n                                    >\n                                        {suggestion}\n                                    </li>\n                                </Link>\n                            );\n                        })}\n                    </ul>\n                );\n            } else {\n                suggestionsListComponent = (\n                    <div class=\"no-suggestions\">\n                        <em>There are no suggestions, woops.</em>\n                    </div>\n                )\n            }\n        }\n        return(\n            <div>\n                <div className=\"jumbotron\" style={{ display: 'block', height: this.props.height}}>\n                    {this.renderText()}\n                    <div style={{width: '50%', margin: '0 auto'}}>\n                    <form>\n                        <InputGroup size=\"lg\" className=\"mx-auto\">\n                            <FormControl value={textInput} onChange={onChangeText} onKeyDown={onKeyDown} placeholder=\"Search for your state or county\" aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" />\n                        </InputGroup>\n                    </form>\n                    {suggestionsListComponent}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Hero;","import React from 'react';\n\nconst Indicators = () => {\n    return(\n        <div className=\"questions-container\">\n            <div className=\"question-cards-wrapper\">\n                <div className=\"question-card\">\n                    <div className=\"question-card-content\">\n                        <span className=\"question-card-title\">How fast is COVID-19 spreading?</span>\n                        <span className=\"question-card-text\">How many cases can be expected from a single case?</span>\n                    </div>\n                </div>\n                <div className=\"question-card\">\n                    <div className=\"question-card-content\">\n                        <span className=\"question-card-title\">Is there widespread testing?</span>\n                        <span className=\"question-card-text\">Is a community only testing their sickest patients?</span>\n                    </div>\n                </div>\n                <div className=\"question-card\">\n                    <div className=\"question-card-content\">\n                        <span className=\"question-card-title\">Can contact tracing meet demand?</span>\n                        <span className=\"question-card-text\">What percentage of cases can be traced within 24 hours?</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Indicators;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst StatePath = (props) => {\n    const { unique, draw, data, fill } = props;\n    return(\n        <Link to=\"/detail\">\n            <path\n                key={'path' + unique}\n                d={draw.shape}\n                stroke=\"#fff\"\n                strokeWidth=\"2px\"\n                style={{cursor: \"pointer\", fill: fill}}\n                onClick={(e) => {\n                    props.nav(data);\n                }}\n                onMouseOver={(event) => {\n                    event.target.style.fill = fill;\n                }}\n                onMouseOut={(event) => {\n                    event.target.style.fill = fill;\n                }}\n            />\n       </Link>\n    );\n}\n\nexport default StatePath;","import React, { Component } from 'react';\nimport StatePath from './StatePath';\nimport states from '../json/states.json';\n\nclass USMap extends Component {\n\n    getRiskLevelColor = (state) => {\n        let riskLevel = this.props.data[state].riskLevel;\n        const riskLevelColorMap = {\n            low: \"rgb(0, 212, 116)\",\n            medium: \"rgb(255, 201, 0)\",\n            high: \"rgb(255, 150, 0)\",\n            critical: \"rgb(255, 0, 52)\",\n        }\n        return riskLevelColorMap[riskLevel];\n    }\n\n    render() {\n        const filteredStates = states.filter(state => state.name !== \"Washington DC\");\n        const map = filteredStates.map((state, index) => \n            <StatePath\n                draw={state}\n                unique={index}\n                data={state.name}\n                nav={this.props.nav}\n                fill={this.getRiskLevelColor(state.name)}\n            > \n            </StatePath>\n        );\n        return (\n            <div className=\"us-map-container\">\n                <svg viewBox=\"0 0 960 600\">\n                    {map}\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default USMap;","import React from 'react';\n\nconst Summary = (props) => {\n    const { state } = props;\n    let { riskLevel, reproductionRate, positiveTestRate, contactTraceRate } = props.data;\n    reproductionRate = reproductionRate.y;\n    positiveTestRate = Math.round(positiveTestRate.y*100);\n    contactTraceRate = Math.round(contactTraceRate.y*100);\n\n    function renderPositiveTestRateContent() {\n        let subtitle;\n        let riskLevel;\n        if(positiveTestRate < 3) {\n            subtitle = \"Indicates widespread testing\";\n            riskLevel = \"low\";\n        } else if (positiveTestRate >= 3 && positiveTestRate < 10) {\n            subtitle = \"Indicates adequate testing\";\n            riskLevel = \"medium\";\n        } else if(positiveTestRate >= 10 && positiveTestRate < 20) {\n            subtitle = \"Indicates insufficent testing\";\n            riskLevel = \"high\";\n        } else if(positiveTestRate >= 20 && positiveTestRate <= 100) {\n            subtitle = \"Indicates dangerously little testing\";\n            riskLevel = \"critical\";\n        } else {\n            throw new Error(\"Positive test rate was calculated incorrectly\");\n        }\n\n        return(\n            <div className=\"indicator-card-content\">\n                <span className=\"title\">Positive Test Rate</span>\n                <span className=\"subtitle\">{subtitle}</span>\n                <span className=\"data-value\">{positiveTestRate}%</span>\n                <span className={`risk ${riskLevel}`}>{riskLevel}</span>\n            </div>\n        );\n    }\n\n    function renderStateStatus() {\n        let status;\n        if(reproductionRate >= 1.2) {\n            status = `${state} is either experiencing an outbreak or will be in the future.`;\n        } else if (reproductionRate >= 1.1 && reproductionRate < 1.2) {\n            status = `${state} is experiencing a rapid rise in cases.`;\n        } else if (reproductionRate < 1.1 && reproductionRate >= 1) {\n            status = `${state} is controlling the growth of cases.`;\n        } else if (reproductionRate < 1) {\n            status = `${state} is seeing a reduction in daily cases. The size of the outbreak is shrinking.`;\n        }\n\n        return(\n            <div className=\"state-status-container\">\n                <span className=\"state-name\">{state}</span>\n                <span>{status}</span>\n            </div>\n        );\n    }\n\n    function renderRiskLevel() {\n        return (\n            <div className=\"risk-level\">\n                <span className=\"top\">{riskLevel}</span>\n                <div className={`risk-level-color-${riskLevel}`}></div>\n                <span className=\"\">COVID Risk Level</span>\n            </div>\n        );\n    }\n\n    function renderReproductionRateContent() {\n        let subtitle;\n        if(reproductionRate < 1) {\n            subtitle = \"The number of daily cases is decreasing\";\n        } else {\n            subtitle = \"The number of daily cases is increasing\";\n        }\n        return(\n            <div className=\"indicator-card-content\">\n                <span className=\"title\">Reproduction rate</span>\n                <span className=\"subtitle\">{subtitle}</span>\n                <span className=\"data-value\">{reproductionRate}</span>\n                <span className={`risk ${riskLevel}`} >{riskLevel}</span>\n            </div>\n        );\n    }\n\n    function renderContactTraceRateContent() {\n        let subtitle;\n        let riskLevelColor;\n        let text;\n        if(contactTraceRate >= 90) {\n            subtitle = \"Contact tracing is slowing the spread\"\n            riskLevelColor = \"low\";\n            text = \"high\";\n        } else if(contactTraceRate < 90 && contactTraceRate >= 20) {\n            subtitle = \"Contact tracing is lacking\";\n            riskLevelColor = \"medium\";\n            text = \"medium\";\n        } else if (contactTraceRate >= 3 && contactTraceRate < 20) {\n            subtitle = \"Contact tracing is failing\";\n            riskLevelColor = \"high\";\n            text = \"low\";\n        } else if (contactTraceRate < 3) {\n            subtitle = \"Contact tracing has collapsed\";\n            riskLevelColor = \"critical\";\n            text = \"critical\"\n        }\n\n        return(\n            <div className=\"indicator-card-content\">\n                <span className=\"title\">Contact Trace Rate</span>\n                <span className=\"subtitle\">{subtitle}</span>\n                <span className=\"data-value\">{contactTraceRate}%</span>\n                <span className={`risk ${riskLevelColor}`}>{text}</span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"summary-container\">\n            <div className=\"overview-container\">\n                <div className=\"state-status\">\n                    {renderStateStatus()}\n                </div>\n                {renderRiskLevel()}\n            </div>\n            <div className=\"indicator-container\">\n                <div className=\"indicator-card\">\n                    {renderReproductionRateContent()}\n                </div>\n                <div className=\"indicator-card\">\n                    {renderPositiveTestRateContent()}\n                </div>\n                <div className=\"indicator-card\">\n                    {renderContactTraceRateContent()}\n                </div>\n            </div>\n            <div className=\"last-updated\">\n                <span>{\"Updated June 27, 2020\"}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Summary;","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nimport \"../../App.css\";\n\nconst PositiveTestRate = (props) => {\n    const stateData = props.positiveTestRateData[props.state];\n\n    const lineData = {\n        datasets: [\n            {\n                label: 'Positive test rate',\n                data: stateData,\n                borderColor: 'green',\n                backgroundColor: 'rgba(0, 255, 0, 0.2)',\n                fill: true,\n                pointRadius: 0,\n                borderWidth: 4,\n            },\n        ]\n    }\n    \n    const options = {\n        scales: {\n            xAxes: [{\n                type: 'time',\n                time: {\n                    unit: 'month'\n                },\n            }],\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true,\n                    max: 0.5,\n                },\n                gridLines: {\n                    borderDash: [3, 2],\n                }\n            }]\n        },\n        hover: {\n            intersect: false,\n            animationDuration: 100\n        },\n        tooltips: {\n            intersect: false,\n            mode: 'index',\n            callbacks: {\n                title: function(tooltipItem, chart) {\n                    // Change the date format\n                    let date = tooltipItem[0].xLabel;\n                    return moment(date, 'YYYY MM DD').format('MMMM DD, YYYY');\n                }\n            }\n        },\n        animation: {\n            duration: 1000\n        },\n        maintainAspectRatio: false,\n    }\n\n    function renderInfo() {\n        const positiveTestRate = Math.round(props.summary.positiveTestRate.y*100);\n        let summary;\n        if(positiveTestRate < 3) {\n            summary = `A low percentage ${positiveTestRate}% of COVID tests were positive, which suggests widespread testing is available.`;\n        } else if (positiveTestRate >= 3 && positiveTestRate < 10) {\n            summary = `A moderate percentage ${positiveTestRate}% of COVID tests were positive, which suggests testing is available but not widespread.`;\n        } else if(positiveTestRate >= 10 && positiveTestRate < 20) {\n            summary = `A large percentage ${positiveTestRate}% of COVID tests were positive, which suggests that testing is limited.`;\n        } else if(positiveTestRate >= 20 && positiveTestRate <= 100) {\n            summary = `A massive percentage ${positiveTestRate}% of COVID tests were positive, which suggests testing is unable to keep up with demand. With a rate this high, many cases may exist undetected.`;\n        }\n        return(\n            <div className=\"chart-info\">\n                <span className=\"info-title\">Positive Test Rate</span>\n                <span className=\"info-state\">{props.state}</span>\n                <p className=\"info-summary\">{summary}</p>\n            </div>\n        );\n    }\n\n    function renderFooter() {\n        return(\n            <div className=\"chart-footer\">\n                <p>Last updated 8/7/2020. The World Health Organization recommends a positive test rate of below 10%. The most successful countries have rates less than 3%. Each data point represents the 7-day trailing average.</p>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"chart-wrapper\">\n            {renderInfo()}\n            <div className=\"chart-height\">\n                <Line\n                    data={lineData}\n                    options={options}\n                />\n            </div>\n            {renderFooter()}\n        </div>\n    );\n}\n\nexport default PositiveTestRate;","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport moment from 'moment';\n\nconst DailyCases = (props) => {\n\n    const barData = {\n        datasets: [\n            {\n                type: 'line',\n                label: '7 day moving average',\n                data: props.movingData,\n                borderColor: 'red',\n                backgroundColor: 'rgba(207, 17, 17, 0.1)',\n                fill: true,\n                lineTension: 1,\n                pointRadius: 0\n            },\n            {   \n                type: 'bar',\n                label: 'Positive Cases',\n                backgroundColor: '#fac9c7',\n                hoverBackgroundColor: 'red',\n                data: props.barData,\n            },\n        ]\n    }\n    const options = {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'month'\n                    },\n                }],\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                        stepSize: 1000,\n                    },\n                    gridLines: {\n                        borderDash: [3, 2],\n                        drawBorder: false,\n                    }\n                }]\n            },\n            hover: {\n                intersect: false,\n                animationDuration: 100\n            },\n            tooltips: {\n                intersect: false,\n                mode: 'index',\n                callbacks: {\n                    title: function(tooltipItem, chart) {\n                        // Change the date format\n                        let date = tooltipItem[0].xLabel;\n                        return moment(date, 'YYYY MM DD').format('MMMM DD, YYYY');\n                    }\n                }\n            },\n            animation: {\n                duration: 1000\n            },\n            maintainAspectRatio: false,\n    }\n\n    function renderInfo() {\n        return(\n            <div className=\"chart-info\">\n                <span className=\"info-title\">Daily cases</span>\n                <span className=\"info-state\">{props.state}</span>\n            </div>\n        );\n    }\n\n    function renderFooter() {\n        return(\n            <div className=\"chart-footer\">\n                <p>Last updated 8/7/2020. Source: New York Times</p>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"chart-wrapper\">\n            {renderInfo()}\n            <div className=\"chart-height\">\n                <Bar\n                    data={barData}\n                    options={options}\n                />\n            </div>\n            {renderFooter()}\n        </div>\n    );\n}\n\nexport default DailyCases;","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport moment from 'moment';\n\nconst DailyDeaths = (props) => {\n    const barData = {\n        datasets: [\n            {\n                type: 'line',\n                label: '7 day moving average',\n                data: props.movingData,\n                borderColor: '#555',\n                strokeWidth: '2px',\n                fill: true,\n                backgroundColor: 'rgba(85, 85, 85, 0.1)',\n                lineTension: 1,\n                pointRadius: 0\n            },\n            {   \n                type: 'bar',\n                label: 'Daily Deaths',\n                backgroundColor: '#bbbaba',\n                hoverBackgroundColor: '#646363',\n                data: props.barData,\n            },\n        ]\n    }\n    const options = {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    gridLines: {\n\n                    },\n                    time: {\n                        unit: 'month'\n                    },\n                }],\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                        stepSize: 100,\n                    },\n                    gridLines: {\n                        borderDash: [3, 2],\n                        drawBorder: false,\n                    }\n                }]\n            },\n            hover: {\n                intersect: false,\n                animationDuration: 100\n            },\n            tooltips: {\n                intersect: false,\n                mode: 'index',\n                callbacks: {\n                    title: function(tooltipItem, chart) {\n                        // Change the date format\n                        let date = tooltipItem[0].xLabel;\n                        return moment(date, 'YYYY MM DD').format('MMMM DD, YYYY');\n                    }\n                }\n            },\n            animation: {\n                duration: 1000\n            },\n            maintainAspectRatio: false,\n    }\n\n    function renderInfo() {\n        return(\n            <div className=\"chart-info\">\n                <span className=\"info-title\">Daily deaths</span>\n                <span className=\"info-state\">{props.state}</span>\n            </div>\n        );\n    }\n\n    function renderFooter() {\n        return(\n            <div className=\"chart-footer\">\n                <p>Last updated 8/7/2020. Source: New York Times</p>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"chart-wrapper\">\n            {renderInfo()}\n            <div className=\"chart-height\">\n                <Bar\n                    data={barData}\n                    options={options}\n                />\n            </div>\n            {renderFooter()}\n        </div>\n    );\n}\n\nexport default DailyDeaths;","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nimport \"../../App.css\";\n\nconst ContactTraceRate = (props) => {\n    const stateData = props.data;\n\n    const lineData = {\n        datasets: [\n            {\n                label: 'Contact Trace Rate',\n                data: stateData,\n                borderColor: 'orange',\n                backgroundColor: 'rgba(0, 0, 0, 0)',\n                fill: true,\n                pointRadius: 0,\n                borderWidth: 4,\n            },\n        ]\n    }\n    \n    const options = {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'month'\n                    },\n                }],\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                        min: 0,\n                        max: 1,\n                    },\n                    gridLines: {\n                        borderDash: [3, 2],\n                    }\n                }]\n            },\n            hover: {\n                intersect: false,\n                animationDuration: 100\n            },\n            tooltips: {\n                intersect: false,\n                mode: 'index',\n                callbacks: {\n                    title: function(tooltipItem, chart) {\n                        // Change the date format\n                        let date = tooltipItem[0].xLabel;\n                        return moment(date, 'YYYY MM DD').format('MMMM DD, YYYY');\n                    }\n                }\n            },\n            animation: {\n                duration: 1000\n            },\n            maintainAspectRatio: false,\n    }\n\n    function renderInfo() {\n        return(\n            <div className=\"chart-info\">\n                <span className=\"info-title\">Contact Trace Rate</span>\n                <span className=\"info-state\">{props.state}</span>\n                <p className=\"info-summary\">Per best available data, {props.state} has ???? contact tracers. With an average of ??? new daily cases, we estimate {props.state} needs ???? contact tracing staff to trace all new cases in 24 hours, before too many other people are infected. This means that {props.state} is likely able to trace ???% of new COVID infections in 24 hours. When this level of tracing is coupled with widely available testing, COVID can be contained without resorting to lockdowns.</p>\n            </div>\n        );\n    }\n\n    function renderFooter() {\n        return(\n            <div className=\"chart-footer\">\n                <p>Last updated 8/7/2020. Experts recommend that at least 90% of contacts for each new case must be traced within 48 hours in order to contain COVID. Experts estimate that tracing each new case within 48 hours requires an average of 5 contact tracers per new case, as well as fast testing.</p>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"chart-wrapper\">\n            {renderInfo()}\n            <div className=\"chart-height\">\n                <Line\n                    data={lineData}\n                    options={options}\n                />\n            </div>\n            {renderFooter()}\n        </div>\n    );\n}\n\nexport default ContactTraceRate;","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nimport \"../../App.css\";\n\nconst ReproductionRate = (props) => {\n    const { data, summary } = props;\n    const reproductionRate = summary.reproductionRate.y;\n    const lineData = {\n        datasets: [\n            {\n                label: 'Reproduction Rate',\n                data: data,\n                borderColor: 'red',\n                backgroundColor: 'rgba(0, 0, 0, 0)',\n                fill: true,\n                pointRadius: 0,\n                borderWidth: 4,\n            },\n        ]\n    }\n    \n    const options = {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'month'\n                    },\n                }],\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                        max: 2,\n                    },\n                    gridLines: {\n                        borderDash: [3, 2],\n                    }\n                }]\n            },\n            hover: {\n                intersect: false,\n                animationDuration: 100\n            },\n            tooltips: {\n                intersect: false,\n                mode: 'index',\n                callbacks: {\n                    title: function(tooltipItem, chart) {\n                        // Change the date format\n                        let date = tooltipItem[0].xLabel;\n                        return moment(date, 'YYYY MM DD').format('MMMM DD, YYYY');\n                    }\n                }\n            },\n            animation: {\n                duration: 1000\n            },\n            maintainAspectRatio: false,\n    }\n\n    function renderInfo() {\n        return(\n            <div className=\"chart-info\">\n                <span className=\"info-title\">Reproduction Rate</span>\n                <span className=\"info-state\">{props.state}</span>\n                <p className=\"info-summary\">On average, each person in {props.state} with COVID is infecting {reproductionRate} other people. As such, the total number of active cases in {props.state} is growing at an unsustainable rate. If this trend continues, the hospital system may become overloaded. Caution is warranted.</p>\n            </div>\n        );\n    }\n\n    function renderFooter() {\n        // Each data point represents the estimated daily reproduction rate. I present the most recent seven days of data as a dashed line, as data is often revised by states several days after reporting. The blue shadow above and below the line represent an 80% confidence interval.\n        return(\n            <div className=\"chart-footer\">\n                <p>Last updated 8/7/2020. Source: Rt.live</p>\n            </div>\n        )\n    }\n    return(\n        <div className=\"chart-wrapper\">\n            {renderInfo()}\n            <div className=\"chart-height\">\n                <Line\n                    data={lineData}\n                    options={options}\n                />\n            </div>\n            {renderFooter()}\n        </div>\n    );\n}\n\nexport default ReproductionRate;","import React, { Component } from 'react';\nimport '../App.css';\n\n// Components\nimport Summary from './Summary';\nimport PositiveTestRate from './charts/PositiveTestRate';\nimport DailyCases from './charts/DailyCases';\nimport DailyDeaths from './charts/DailyDeaths';\nimport ContactTraceRate from './charts/ContactTraceRate';\nimport ReproductionRate from './charts/ReproductionRate';\n\nclass Dashboard extends Component {\n\n    // Conditional data color of the background\n    getRiskLevelColor = (riskLevel) => {\n        const riskLevelColorMap = {\n            low: \"rgb(0, 212, 116)\",\n            medium: \"rgb(255, 201, 0)\",\n            high: \"rgb(255, 150, 0)\",\n            critical: \"rgb(255, 0, 52)\",\n        }\n        return riskLevelColorMap[riskLevel];\n    }\n\n    // This actually returns the div...\n    riskLevelColorBackground = (riskLevel) => {\n        let thisColor = this.getRiskLevelColor(riskLevel);\n        return <div style={{height: '440px', backgroundColor: `${thisColor}` , zIndex: '1'}}></div>\n    }\n\n    getContactTraceRate = (state) => {\n        const riskLevelData = this.props.data.riskLevel;\n        let num = riskLevelData[state];\n        num = num * 100;\n        num = Math.round(num);\n        return num;\n    }\n\n    render(){\n        const { reproductionRate, positiveTestRate, contactTraceRate, dailyCases, dailyCasesMA, dailyDeaths, dailyDeathsMA, summary } = this.props.data;\n        const { state } = this.props;\n        return(\n            <div>\n                {this.riskLevelColorBackground(summary[state].riskLevel)}\n                <Summary state={state} data={summary[state]} />\n                <div className=\"charts-container\">\n                    <ReproductionRate state={state} data={reproductionRate[state]} summary={summary[state]} />\n                    <PositiveTestRate state={state} positiveTestRateData={positiveTestRate} summary={summary[state]} />\n                    <ContactTraceRate state={state} data={contactTraceRate[state]} summary={summary[state]} />\n                    <DailyCases state={state} barData={dailyCases[state]} movingData={dailyCasesMA[state]} />\n                    <DailyDeaths state={state} barData={dailyDeaths[state]} movingData={dailyDeathsMA[state]} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;","import React from 'react';\nimport \"../App.css\";\n\nconst About = () => {\n    return(\n        <div className=\"about-content-container\">\n            <section>\n                <h2>COVID-19 Insights</h2>\n                <p>COVID-19 Insights is a data visualization dashboard that provides analysis on the ongoing pandemic in the United States. The key motivation is to display the data in a clear manner to help the public monitor COVID-19.</p>\n            </section>\n            <section>\n                <h2>Data Sources</h2>\n                <p>Caseload data (cases, deaths) are sourced from the New York Times.</p>\n                <p>Contact Tracing Data - testandtrace.com</p>\n                <p>Test results data - The COVID Tracking Project</p>\n                <p>Infection rate data - rt.live</p>\n            </section>\n            <section>\n                <h2>Data Transformations</h2>\n                <p>A majority of the data that I accessed was in a raw form and required cleaning and transformation in order to be used on the client side application. </p>\n            </section>\n            <section>\n                <h2>Limitations of my analysis</h2>\n                <p>Given that this is a novel and ongoing situation, my analysis is only as good as the data I have sourced. I am also in the process of streamlining my data flow in order to facilitate improved testing coverage and reliability. Please give me feedback on my data transformations, it would really help ensure this project is providing the most accurate snapshots of the pandemic.</p>\n            </section>\n            <section>\n                <h2>Thanks</h2>\n                <p>I’d like to thank covidactnow.org for guiding my inspiration during my brainstorming. Your UX/UI promotes quick navigation and clear understanding of complex data. Your platform gave me some helpful guidance on how best to layout the information.</p>\n                <p>I’d like to also thank the endless hardwork that has been put into this data collection effort upstream. From the frontline medical workers to data aggregators. This project would not have been possible without you all. </p>\n            </section>\n        </div>\n    )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Navbar from './Navbar';\nimport Hero from './components/Hero';\nimport Indicators from './components/Indicators';\nimport USMap from './components/USMap';\nimport Dashboard from './components/Dashboard';\nimport About from './components/About';\n\nclass AppRouter extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        currentState: \"\",\n        summary: \"\",\n        dailyCases: \"\",\n        dailyCasesMA: \"\",\n        dailyDeaths: \"\",\n        dailyDeathsMA: \"\",\n        reproductionRate: \"\",\n        positiveTestRate: \"\",\n        contactTraceRate: \"\",\n      }\n    }\n\n    navToState = (state) => {\n      this.setState({ currentState: state });\n    }\n\n    // Fetch Data for the application\n    // This is a temporary solution. This will be one fetch, one setState in the future.\n    fetchData = async () => {  \n        const summary = await axios.get('https://api.c19insights.io/v1/summary');\n        const dailyCases = await axios.get('https://api.c19insights.io/v1/daily_cases');\n        const dailyCasesMA = await axios.get('https://api.c19insights.io/v1/daily_cases_moving_average');\n        const dailyDeaths = await axios.get('https://api.c19insights.io/v1/daily_deaths');\n        const dailyDeathsMA = await axios.get('https://api.c19insights.io/v1/daily_deaths_moving_average');\n        const positiveTestRate = await axios.get('https://api.c19insights.io/v1/positive_test_rate');\n        const reproductionRate = await axios.get('https://api.c19insights.io/v1/reproduction_rate');\n        const contactTraceRate = await axios.get('https://api.c19insights.io/v1/contact_trace_rate');\n        const riskLevel = await axios.get('https://api.c19insights.io/v1/risk_level');\n\n        this.setState({ summary: summary.data });\n        this.setState({ dailyCases: dailyCases.data })\n        this.setState({ dailyCasesMA: dailyCasesMA.data });\n        this.setState({ dailyDeaths: dailyDeaths.data});\n        this.setState({ dailyDeathsMA: dailyDeathsMA.data });\n        this.setState({ positiveTestRate: positiveTestRate.data });\n        this.setState({ reproductionRate: reproductionRate.data });\n        this.setState({ contactTraceRate: contactTraceRate.data });\n        this.setState({ riskLevel: riskLevel.data });\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    render() {\n\n        // Wait for the data to be fetched...\n        if(this.state.summary === \"\") return null;\n        console.log(this.state);\n        return(\n            <div>\n                <Router>\n                    <Navbar />\n                    <Route exact path=\"/\">\n                        <Hero  height={'300px'} nav={this.navToState}  title={\"Visualize United States COVID-19 Data\"} subtitle={\"See COVID data and risk level for your community\"} style={{marginTop: '56px'}}/>\n                        <Indicators style={{marginTop: '56px'}}/>\n                        <USMap nav={this.navToState} data={this.state.summary} /> \n                    </Route>\n                    <Route path=\"/detail\">\n                        <Dashboard state={this.state.currentState} data={this.state} />\n                    </Route>\n                    <Route path=\"/about\">\n                        <About />\n                    </Route>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default AppRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppRouter from './AppRouter';\n\nReactDOM.render(\n    <AppRouter />,\n  document.getElementById('root')\n);"],"sourceRoot":""}